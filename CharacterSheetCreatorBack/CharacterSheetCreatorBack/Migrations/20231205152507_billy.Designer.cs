// <auto-generated />
using System;
using CharacterSheetCreatorBack.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterSheetCreatorBack.Migrations
{
    [DbContext(typeof(RpgContext))]
    [Migration("20231205152507_billy")]
    partial class billy
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Ability", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CharacterID")
                        .HasColumnType("int");

                    b.Property<int>("Modifier")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("CharacterID");

                    b.ToTable("Abilities", (string)null);
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Attack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharacterID")
                        .HasColumnType("int");

                    b.Property<string>("DamageDice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedAbilityName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterID");

                    b.HasIndex("LinkedAbilityName");

                    b.ToTable("Attacks", (string)null);
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Character", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Ac")
                        .HasColumnType("int");

                    b.Property<string>("ClasseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HitDice")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<int>("HpMax")
                        .HasColumnType("int");

                    b.Property<int>("IdGame")
                        .HasColumnType("int");

                    b.Property<int>("IdPlayer")
                        .HasColumnType("int");

                    b.Property<int>("Initiative")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassivePerception")
                        .HasColumnType("int");

                    b.Property<int>("ProefficiencyBonus")
                        .HasColumnType("int");

                    b.Property<int>("SpeelCastAbility")
                        .HasColumnType("int");

                    b.Property<int>("SpellSaveDC")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClasseName");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Class", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HitDice")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Skill", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AbilityName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CharacterID")
                        .HasColumnType("int");

                    b.Property<int>("Modifier")
                        .HasColumnType("int");

                    b.Property<bool>("Proefficiency")
                        .HasColumnType("bit");

                    b.HasKey("Name");

                    b.HasIndex("AbilityName");

                    b.HasIndex("CharacterID");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Spell", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CharacterID")
                        .HasColumnType("int");

                    b.HasKey("Description");

                    b.HasIndex("CharacterID");

                    b.ToTable("Spells", (string)null);
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Ability", b =>
                {
                    b.HasOne("CharacterSheetCreatorBack.Classes.Character", null)
                        .WithMany("Abilities")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Attack", b =>
                {
                    b.HasOne("CharacterSheetCreatorBack.Classes.Character", null)
                        .WithMany("Attacks")
                        .HasForeignKey("CharacterID");

                    b.HasOne("CharacterSheetCreatorBack.Classes.Ability", "LinkedAbility")
                        .WithMany()
                        .HasForeignKey("LinkedAbilityName");

                    b.Navigation("LinkedAbility");
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Character", b =>
                {
                    b.HasOne("CharacterSheetCreatorBack.Classes.Class", "Classe")
                        .WithMany()
                        .HasForeignKey("ClasseName");

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Skill", b =>
                {
                    b.HasOne("CharacterSheetCreatorBack.Classes.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityName");

                    b.HasOne("CharacterSheetCreatorBack.Classes.Character", null)
                        .WithMany("Skills")
                        .HasForeignKey("CharacterID");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Spell", b =>
                {
                    b.HasOne("CharacterSheetCreatorBack.Classes.Character", null)
                        .WithMany("Spells")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("CharacterSheetCreatorBack.Classes.Character", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Attacks");

                    b.Navigation("Skills");

                    b.Navigation("Spells");
                });
#pragma warning restore 612, 618
        }
    }
}
